

Microchip MPLAB XC8 Assembler V2.20 build 20200408173844 
                                                                                               Fri Oct 23 16:57:50 2020

Microchip MPLAB XC8 C Compiler v2.20 (Free license) build 20200408173844 Og1 
     1                           	processor	10F322
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     6                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	maintext,global,class=CODE,split=1,delta=2
     8                           	psect	text1,local,class=CODE,merge=1,delta=2
     9                           	psect	text2,local,class=CODE,merge=1,delta=2
    10                           	psect	text3,local,class=CODE,merge=1,delta=2
    11                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    12                           	dabs	1,0x7E,2
    13  0000                     
    14                           ; Version 2.20
    15                           ; Generated 29/04/2020 GMT
    16                           ; 
    17                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    18                           ; All rights reserved.
    19                           ; 
    20                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    21                           ; 
    22                           ; Redistribution and use in source and binary forms, with or without modification, are
    23                           ; permitted provided that the following conditions are met:
    24                           ; 
    25                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    26                           ;        conditions and the following disclaimer.
    27                           ; 
    28                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    29                           ;        of conditions and the following disclaimer in the documentation and/or other
    30                           ;        materials provided with the distribution.
    31                           ; 
    32                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    33                           ;        software without specific prior written permission.
    34                           ; 
    35                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    36                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    37                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    38                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    39                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    40                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    41                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    42                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    43                           ; 
    44                           ; 
    45                           ; Code-generator required, PIC10F322 Definitions
    46                           ; 
    47                           ; SFR Addresses
    48  0000                     	;# 
    49  0001                     	;# 
    50  0002                     	;# 
    51  0003                     	;# 
    52  0004                     	;# 
    53  0005                     	;# 
    54  0006                     	;# 
    55  0007                     	;# 
    56  0008                     	;# 
    57  0009                     	;# 
    58  000A                     	;# 
    59  000B                     	;# 
    60  000C                     	;# 
    61  000D                     	;# 
    62  000E                     	;# 
    63  000F                     	;# 
    64  0010                     	;# 
    65  0011                     	;# 
    66  0012                     	;# 
    67  0013                     	;# 
    68  0014                     	;# 
    69  0015                     	;# 
    70  0016                     	;# 
    71  0016                     	;# 
    72  0017                     	;# 
    73  0018                     	;# 
    74  0019                     	;# 
    75  0019                     	;# 
    76  001A                     	;# 
    77  001B                     	;# 
    78  001C                     	;# 
    79  001D                     	;# 
    80  001E                     	;# 
    81  001F                     	;# 
    82  0020                     	;# 
    83  0020                     	;# 
    84  0021                     	;# 
    85  0022                     	;# 
    86  0022                     	;# 
    87  0023                     	;# 
    88  0024                     	;# 
    89  0025                     	;# 
    90  0026                     	;# 
    91  0027                     	;# 
    92  0027                     	;# 
    93  0028                     	;# 
    94  0029                     	;# 
    95  002A                     	;# 
    96  002A                     	;# 
    97  002B                     	;# 
    98  002C                     	;# 
    99  002D                     	;# 
   100  002E                     	;# 
   101  0030                     	;# 
   102  0031                     	;# 
   103  0032                     	;# 
   104  0033                     	;# 
   105  0034                     	;# 
   106  0035                     	;# 
   107  0036                     	;# 
   108  0037                     	;# 
   109  0038                     	;# 
   110  0039                     	;# 
   111  003A                     	;# 
   112  003B                     	;# 
   113  003C                     	;# 
   114  003D                     	;# 
   115  003E                     	;# 
   116  003F                     	;# 
   117  002A                     _NCO1INC	set	42
   118  0031                     _CLC1CON	set	49
   119  0034                     _CLC1POL	set	52
   120  0033                     _CLC1SEL1	set	51
   121  0032                     _CLC1SEL0	set	50
   122  0038                     _CLC1GLS3	set	56
   123  0037                     _CLC1GLS2	set	55
   124  0036                     _CLC1GLS1	set	54
   125  0035                     _CLC1GLS0	set	53
   126  002D                     _NCO1CON	set	45
   127  002E                     _NCO1CLK	set	46
   128  0013                     _T2CON	set	19
   129  0014                     _PWM1DCL	set	20
   130  0015                     _PWM1DCH	set	21
   131  0012                     _PR2	set	18
   132  0016                     _PWM1CON	set	22
   133  001B                     _IOCAN	set	27
   134  001A                     _IOCAP	set	26
   135  0009                     _WPUA	set	9
   136  0005                     _PORTA	set	5
   137  0008                     _ANSELA	set	8
   138  0010                     _OSCCON	set	16
   139  0007                     _LATA	set	7
   140  0006                     _TRISA	set	6
   141  0001                     _TMR0	set	1
   142  000E                     _OPTION_REG	set	14
   143                           
   144                           	psect	cinit
   145  01FE                     start_initialization:	
   146                           ; #config settings
   147                           
   148  01FE                     __initialization:
   149  01FE                     end_of_initialization:	
   150                           ;End of C runtime variable initialization code
   151                           
   152  01FE                     __end_of__initialization:
   153  01FE  0183               	clrf	3
   154  01FF  29A3               	ljmp	_main	;jump to C main() function
   155                           
   156                           	psect	cstackCOMMON
   157  0000                     __pcstackCOMMON:
   158  0000                     ??_msec_delay:
   159  0000                     ??_wait_trigger:	
   160                           ; 1 bytes @ 0x0
   161                           
   162                           
   163                           	psect	cstackBANK0
   164  0040                     __pcstackBANK0:	
   165                           ; 1 bytes @ 0x0
   166                           
   167  0040                     ?_msec_delay:
   168  0040                     ?_wait_trigger:	
   169                           ; 1 bytes @ 0x0
   170                           
   171  0040                     ?_main:	
   172                           ; 1 bytes @ 0x0
   173                           
   174  0040                     ?_read_cap:	
   175                           ; 1 bytes @ 0x0
   176                           
   177  0040                     msec_delay@msec:	
   178                           ; 2 bytes @ 0x0
   179                           
   180                           
   181                           ; 2 bytes @ 0x0
   182  0040                     	ds	2
   183  0042                     ??_read_cap:
   184                           
   185                           ; 1 bytes @ 0x2
   186  0042                     	ds	2
   187  0044                     read_cap@cap_val:
   188                           
   189                           ; 2 bytes @ 0x4
   190  0044                     	ds	2
   191  0046                     ??_main:
   192                           
   193                           ; 1 bytes @ 0x6
   194  0046                     	ds	2
   195  0048                     main@babble_time:
   196                           
   197                           ; 2 bytes @ 0x8
   198  0048                     	ds	2
   199                           
   200                           	psect	maintext
   201  01A3                     __pmaintext:	
   202 ;;
   203 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   204 ;;
   205 ;; *************** function _main *****************
   206 ;; Defined at:
   207 ;;		line 61 in file "babble.c"
   208 ;; Parameters:    Size  Location     Type
   209 ;;		None
   210 ;; Auto vars:     Size  Location     Type
   211 ;;  babble_time     2    8[BANK0 ] unsigned int 
   212 ;; Return value:  Size  Location     Type
   213 ;;                  1    wreg      void 
   214 ;; Registers used:
   215 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   216 ;; Tracked objects:
   217 ;;		On entry : B00/0
   218 ;;		On exit  : 0/0
   219 ;;		Unchanged: 0/0
   220 ;; Data sizes:     COMMON   BANK0
   221 ;;      Params:         0       0
   222 ;;      Locals:         0       2
   223 ;;      Temps:          0       2
   224 ;;      Totals:         0       4
   225 ;;Total ram usage:        4 bytes
   226 ;; Hardware stack levels required when called:    1
   227 ;; This function calls:
   228 ;;		_msec_delay
   229 ;;		_read_cap
   230 ;;		_wait_trigger
   231 ;; This function is called by:
   232 ;;		Startup code after reset
   233 ;; This function uses a non-reentrant model
   234 ;;
   235                           
   236                           
   237                           ;psect for function _main
   238  01A3                     _main:
   239                           
   240                           ;babble.c: 62:     unsigned int babble_time;;babble.c: 63:     OSCCON|=(7<<4);
   241                           
   242                           ;incstack = 0
   243                           ; Regs used in _main: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   244  01A3  3070               	movlw	112
   245  01A4  00FF               	movwf	127
   246  01A5  087F               	movf	127,w
   247  01A6  0490               	iorwf	16,f	;volatile
   248                           
   249                           ;babble.c: 64:     ANSELA=0;
   250  01A7  0188               	clrf	8	;volatile
   251                           
   252                           ;babble.c: 65:     OPTION_REG=1;
   253  01A8  3001               	movlw	1
   254  01A9  008E               	movwf	14	;volatile
   255                           
   256                           ;babble.c: 66:     TRISA&=~((1<<1)|(1<<2));
   257  01AA  30F9               	movlw	249
   258  01AB  00FF               	movwf	127
   259  01AC  087F               	movf	127,w
   260  01AD  0586               	andwf	6,f	;volatile
   261                           
   262                           ;babble.c: 67:     LATA&=~((1<<1)|(1<<2));
   263  01AE  30F9               	movlw	249
   264  01AF  00FF               	movwf	127
   265  01B0  087F               	movf	127,w
   266  01B1  0587               	andwf	7,f	;volatile
   267                           
   268                           ;babble.c: 68:     PORTA&=~((1<<2));
   269  01B2  30FB               	movlw	251
   270  01B3  00FF               	movwf	127
   271  01B4  087F               	movf	127,w
   272  01B5  0585               	andwf	5,f	;volatile
   273                           
   274                           ;babble.c: 69:     WPUA|=(1<<2);
   275  01B6  1509               	bsf	9,2	;volatile
   276                           
   277                           ;babble.c: 70:     IOCAP=1;
   278  01B7  3001               	movlw	1
   279  01B8  009A               	movwf	26	;volatile
   280                           
   281                           ;babble.c: 71:     IOCAN=0;
   282  01B9  019B               	clrf	27	;volatile
   283                           
   284                           ;babble.c: 73:     PWM1CON=(1<<7);
   285  01BA  3080               	movlw	128
   286  01BB  0096               	movwf	22	;volatile
   287                           
   288                           ;babble.c: 74:     PR2=31;
   289  01BC  301F               	movlw	31
   290  01BD  0092               	movwf	18	;volatile
   291                           
   292                           ;babble.c: 75:     PWM1DCH=16;
   293  01BE  3010               	movlw	16
   294  01BF  0095               	movwf	21	;volatile
   295                           
   296                           ;babble.c: 76:     PWM1DCL=0;
   297  01C0  0194               	clrf	20	;volatile
   298                           
   299                           ;babble.c: 77:     T2CON=(1<<2);
   300  01C1  3004               	movlw	4
   301  01C2  0093               	movwf	19	;volatile
   302                           
   303                           ;babble.c: 79:     NCO1CLK=2;
   304  01C3  3002               	movlw	2
   305  01C4  00AE               	movwf	46	;volatile
   306                           
   307                           ;babble.c: 80:     NCO1CON=0x80;
   308  01C5  3080               	movlw	128
   309  01C6  00AD               	movwf	45	;volatile
   310                           
   311                           ;babble.c: 82:     CLC1GLS0=2;
   312  01C7  3002               	movlw	2
   313  01C8  00B5               	movwf	53	;volatile
   314                           
   315                           ;babble.c: 83:     CLC1GLS1=0;
   316  01C9  01B6               	clrf	54	;volatile
   317                           
   318                           ;babble.c: 84:     CLC1GLS2=0x20;
   319  01CA  3020               	movlw	32
   320  01CB  00B7               	movwf	55	;volatile
   321                           
   322                           ;babble.c: 85:     CLC1GLS3=0;
   323  01CC  01B8               	clrf	56	;volatile
   324                           
   325                           ;babble.c: 86:     CLC1SEL0=3;
   326  01CD  3003               	movlw	3
   327  01CE  00B2               	movwf	50	;volatile
   328                           
   329                           ;babble.c: 87:     CLC1SEL1=5;
   330  01CF  3005               	movlw	5
   331  01D0  00B3               	movwf	51	;volatile
   332                           
   333                           ;babble.c: 88:     CLC1POL=0;
   334  01D1  01B4               	clrf	52	;volatile
   335                           
   336                           ;babble.c: 89:     CLC1CON=0xC1;
   337  01D2  30C1               	movlw	193
   338  01D3  00B1               	movwf	49	;volatile
   339  01D4                     l709:
   340                           
   341                           ;babble.c: 91:         NCO1INC=(16384);
   342  01D4  3000               	movlw	0
   343  01D5  00AA               	movwf	42	;volatile
   344  01D6  3040               	movlw	64
   345  01D7  00AB               	movwf	43	;volatile
   346  01D8  3000               	movlw	0
   347  01D9  00AC               	movwf	44	;volatile
   348                           
   349                           ;babble.c: 92:         wait_trigger();
   350  01DA  2172               	fcall	_wait_trigger
   351                           
   352                           ;babble.c: 93:         babble_time=90;
   353  01DB  305A               	movlw	90
   354  01DC  00C8               	movwf	main@babble_time
   355  01DD  3000               	movlw	0
   356  01DE  00C9               	movwf	main@babble_time+1
   357  01DF                     l719:	
   358                           ;babble.c: 94:         while (babble_time--){
   359                           
   360                           
   361                           ;babble.c: 94:         while (babble_time--){
   362  01DF  3001               	movlw	1
   363  01E0  02C8               	subwf	main@babble_time,f
   364  01E1  3000               	movlw	0
   365  01E2  1C03               	skipc
   366  01E3  03C9               	decf	main@babble_time+1,f
   367  01E4  02C9               	subwf	main@babble_time+1,f
   368  01E5  0A48               	incf	main@babble_time,w
   369  01E6  1903               	btfsc	3,2
   370  01E7  0A49               	incf	main@babble_time+1,w
   371  01E8  1903               	btfsc	3,2
   372  01E9  29D4               	goto	l709
   373                           
   374                           ;babble.c: 95:             NCO1INC=read_cap()+(16384);
   375  01EA  2189               	fcall	_read_cap
   376  01EB  0840               	movf	?_read_cap,w
   377  01EC  3E00               	addlw	0
   378  01ED  00C6               	movwf	??_main
   379  01EE  0841               	movf	?_read_cap+1,w
   380  01EF  1803               	skipnc
   381  01F0  3E01               	addlw	1
   382  01F1  3E40               	addlw	64
   383  01F2  00C7               	movwf	??_main+1
   384  01F3  0846               	movf	??_main,w
   385  01F4  00AA               	movwf	42	;volatile
   386  01F5  0847               	movf	??_main+1,w
   387  01F6  00AB               	movwf	43	;volatile
   388  01F7  01AC               	clrf	44	;volatile
   389                           
   390                           ;babble.c: 96:             msec_delay(32);
   391  01F8  3020               	movlw	32
   392  01F9  00C0               	movwf	msec_delay@msec
   393  01FA  3000               	movlw	0
   394  01FB  00C1               	movwf	msec_delay@msec+1
   395  01FC  2176               	fcall	_msec_delay
   396  01FD  29DF               	goto	l719
   397  01FE                     __end_of_main:
   398                           
   399                           	psect	text1
   400  0172                     __ptext1:	
   401 ;; *************** function _wait_trigger *****************
   402 ;; Defined at:
   403 ;;		line 53 in file "babble.c"
   404 ;; Parameters:    Size  Location     Type
   405 ;;		None
   406 ;; Auto vars:     Size  Location     Type
   407 ;;		None
   408 ;; Return value:  Size  Location     Type
   409 ;;                  1    wreg      void 
   410 ;; Registers used:
   411 ;;		None
   412 ;; Tracked objects:
   413 ;;		On entry : 0/0
   414 ;;		On exit  : 0/0
   415 ;;		Unchanged: 0/0
   416 ;; Data sizes:     COMMON   BANK0
   417 ;;      Params:         0       0
   418 ;;      Locals:         0       0
   419 ;;      Temps:          0       0
   420 ;;      Totals:         0       0
   421 ;;Total ram usage:        0 bytes
   422 ;; Hardware stack levels used:    1
   423 ;; This function calls:
   424 ;;		Nothing
   425 ;; This function is called by:
   426 ;;		_main
   427 ;; This function uses a non-reentrant model
   428 ;;
   429                           
   430                           
   431                           ;psect for function _wait_trigger
   432  0172                     _wait_trigger:
   433                           
   434                           ;incstack = 0
   435                           ; Regs used in _wait_trigger: []
   436  0172  019C               	clrf	28	;# 
   437  0173  1C1C               	btfss	28,0	;# 
   438  0174  2971               	goto	($+-1)	;# 
   439  0175  0008               	return
   440  0176                     __end_of_wait_trigger:
   441                           
   442                           	psect	text2
   443  0189                     __ptext2:	
   444 ;; *************** function _read_cap *****************
   445 ;; Defined at:
   446 ;;		line 40 in file "babble.c"
   447 ;; Parameters:    Size  Location     Type
   448 ;;		None
   449 ;; Auto vars:     Size  Location     Type
   450 ;;  cap_val         2    4[BANK0 ] unsigned int 
   451 ;; Return value:  Size  Location     Type
   452 ;;                  2    0[BANK0 ] unsigned int 
   453 ;; Registers used:
   454 ;;		wreg, status,2, status,0, btemp+1
   455 ;; Tracked objects:
   456 ;;		On entry : 0/0
   457 ;;		On exit  : 0/0
   458 ;;		Unchanged: 0/0
   459 ;; Data sizes:     COMMON   BANK0
   460 ;;      Params:         0       2
   461 ;;      Locals:         0       2
   462 ;;      Temps:          0       2
   463 ;;      Totals:         0       6
   464 ;;Total ram usage:        6 bytes
   465 ;; Hardware stack levels used:    1
   466 ;; This function calls:
   467 ;;		Nothing
   468 ;; This function is called by:
   469 ;;		_main
   470 ;; This function uses a non-reentrant model
   471 ;;
   472                           
   473                           
   474                           ;psect for function _read_cap
   475  0189                     _read_cap:
   476                           
   477                           ;babble.c: 41:     unsigned int cap_val;;babble.c: 42:     OPTION_REG=1;
   478                           
   479                           ;incstack = 0
   480                           ; Regs used in _read_cap: [wreg+status,2+status,0+btemp+1]
   481  0189  3001               	movlw	1
   482  018A  008E               	movwf	14	;volatile
   483                           
   484                           ;babble.c: 43:     TMR0=0;
   485  018B  0181               	clrf	1	;volatile
   486                           
   487                           ;babble.c: 44:     TRISA|=(1<<2);
   488  018C  1506               	bsf	6,2	;volatile
   489  018D  1D05               	btfss	5,2	;# 
   490  018E  2988               	goto	($+-1)	;# 
   491                           
   492                           ;babble.c: 47:     cap_val=TMR0;
   493  018F  0801               	movf	1,w	;volatile
   494  0190  00C2               	movwf	??_read_cap
   495  0191  01C3               	clrf	??_read_cap+1
   496  0192  0842               	movf	??_read_cap,w
   497  0193  00C4               	movwf	read_cap@cap_val
   498  0194  0843               	movf	??_read_cap+1,w
   499  0195  00C5               	movwf	read_cap@cap_val+1
   500                           
   501                           ;babble.c: 48:     TRISA&=~(1<<2);
   502  0196  30FB               	movlw	251
   503  0197  00FF               	movwf	127
   504  0198  087F               	movf	127,w
   505  0199  0586               	andwf	6,f	;volatile
   506                           
   507                           ;babble.c: 49:     LATA&=~(1<<2);
   508  019A  30FB               	movlw	251
   509  019B  00FF               	movwf	127
   510  019C  087F               	movf	127,w
   511  019D  0587               	andwf	7,f	;volatile
   512                           
   513                           ;babble.c: 50:     return cap_val;
   514  019E  0845               	movf	read_cap@cap_val+1,w
   515  019F  00C1               	movwf	?_read_cap+1
   516  01A0  0844               	movf	read_cap@cap_val,w
   517  01A1  00C0               	movwf	?_read_cap
   518  01A2  0008               	return
   519  01A3                     __end_of_read_cap:
   520                           
   521                           	psect	text3
   522  0176                     __ptext3:	
   523 ;; *************** function _msec_delay *****************
   524 ;; Defined at:
   525 ;;		line 28 in file "babble.c"
   526 ;; Parameters:    Size  Location     Type
   527 ;;  msec            2    0[BANK0 ] unsigned int 
   528 ;; Auto vars:     Size  Location     Type
   529 ;;		None
   530 ;; Return value:  Size  Location     Type
   531 ;;                  1    wreg      void 
   532 ;; Registers used:
   533 ;;		wreg, status,2, status,0
   534 ;; Tracked objects:
   535 ;;		On entry : 0/0
   536 ;;		On exit  : 0/0
   537 ;;		Unchanged: 0/0
   538 ;; Data sizes:     COMMON   BANK0
   539 ;;      Params:         0       2
   540 ;;      Locals:         0       0
   541 ;;      Temps:          0       0
   542 ;;      Totals:         0       2
   543 ;;Total ram usage:        2 bytes
   544 ;; Hardware stack levels used:    1
   545 ;; This function calls:
   546 ;;		Nothing
   547 ;; This function is called by:
   548 ;;		_main
   549 ;; This function uses a non-reentrant model
   550 ;;
   551                           
   552                           
   553                           ;psect for function _msec_delay
   554  0176                     _msec_delay:
   555                           
   556                           ;babble.c: 29:     OPTION_REG=3;
   557                           
   558                           ;incstack = 0
   559                           ; Regs used in _msec_delay: [wreg+status,2+status,0]
   560  0176  3003               	movlw	3
   561  0177  008E               	movwf	14	;volatile
   562  0178                     l655:	
   563                           ;babble.c: 30:     while(msec--){
   564                           
   565                           
   566                           ;babble.c: 30:     while(msec--){
   567  0178  3001               	movlw	1
   568  0179  02C0               	subwf	msec_delay@msec,f
   569  017A  3000               	movlw	0
   570  017B  1C03               	skipc
   571  017C  03C1               	decf	msec_delay@msec+1,f
   572  017D  02C1               	subwf	msec_delay@msec+1,f
   573  017E  0A40               	incf	msec_delay@msec,w
   574  017F  1903               	btfsc	3,2
   575  0180  0A41               	incf	msec_delay@msec+1,w
   576  0181  1903               	btfsc	3,2
   577  0182  0008               	return
   578  0183  3005               	movlw	5	;# 
   579  0184  0081               	movwf	1	;# 
   580  0185  110B               	bcf	11,2	;# 
   581  0186  1D0B               	btfss	11,2	;# 
   582  0187  2975               	goto	($+-1)	;# 
   583  0188  2978               	goto	l655
   584  0189                     __end_of_msec_delay:
   585  007E                     btemp	set	126	;btemp
   586  007E                     wtemp0	set	126
   587                           
   588                           	psect	config
   589                           
   590                           ;Config register CONFIG @ 0x2007
   591                           ;	Oscillator Selection bits
   592                           ;	FOSC = INTOSC, INTOSC oscillator: CLKIN function disabled
   593                           ;	Brown-out Reset Enable
   594                           ;	BOREN = OFF, Brown-out Reset disabled
   595                           ;	Watchdog Timer Enable
   596                           ;	WDTE = OFF, WDT disabled
   597                           ;	Power-up Timer Enable bit
   598                           ;	PWRTE = OFF, PWRT disabled
   599                           ;	MCLR Pin Function Select bit
   600                           ;	MCLRE = ON, MCLR pin function is MCLR
   601                           ;	Code Protection bit
   602                           ;	CP = OFF, Program memory code protection is disabled
   603                           ;	Low-Voltage Programming Enable
   604                           ;	LVP = OFF, High-voltage on MCLR/VPP must be used for programming
   605                           ;	Brown-out Reset Selection bits
   606                           ;	LPBOR = ON, BOR enabled
   607                           ;	Brown-out Reset Voltage Selection
   608                           ;	BORV = LO, Brown-out Reset Voltage (Vbor), low trip point selected.
   609                           ;	Flash Memory Self-Write Protection
   610                           ;	WRT = OFF, Write protection off
   611  2007                     	org	8199
   612  2007  3EE0               	dw	16096

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON            0      0       0
    BANK0            62     10      10

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_read_cap

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0     144
                                              6 BANK0      4     4      0
                         _msec_delay
                           _read_cap
                       _wait_trigger
 ---------------------------------------------------------------------------------
 (1) _wait_trigger                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _read_cap                                             6     4      2      23
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (1) _msec_delay                                           2     0      2      98
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _msec_delay
   _read_cap
   _wait_trigger

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               0      0       0       1        0.0%
STACK                0      0       0       2        0.0%
BANK0               3E      A       A       3       16.1%
ABS                  0      0       0       4        0.0%
DATA                 0      0       0       5        0.0%
BITBANK0            3E      0       0       6        0.0%


Microchip Technology PIC Macro Assembler V2.20 build 20200408173844 
Symbol Table                                                                                   Fri Oct 23 16:57:50 2020

                    TMR0 0001                      l709 01D4                      l655 0178  
                    l719 01DF                      _PR2 0012                     IOCAF 001C  
                   PORTA 0005                     _LATA 0007                     _TMR0 0001  
                   _WPUA 0009                     _main 01A3                     btemp 007E  
                   start 0000                    INTCON 000B                    ?_main 0040  
                  _T2CON 0013                    _IOCAN 001B                    _IOCAP 001A  
                  _PORTA 0005                    _TRISA 0006                    status 0003  
                  wtemp0 007E          __initialization 01FE             __end_of_main 01FE  
                 ??_main 0046                   _ANSELA 0008                   _OSCCON 0010  
       __end_of_read_cap 01A3  __end_of__initialization 01FE           __pcstackCOMMON 0000  
             __pmaintext 01A3                  _CLC1CON 0031                  _CLC1POL 0034  
                _NCO1CLK 002E                  _NCO1CON 002D                  _NCO1INC 002A  
                _PWM1DCH 0015                  _PWM1DCL 0014                  _PWM1CON 0016  
              ?_read_cap 0040                  __ptext1 0172                  __ptext2 0189  
                __ptext3 0176               _msec_delay 0176     end_of_initialization 01FE  
             ??_read_cap 0042            ?_wait_trigger 0040          main@babble_time 0048  
         ??_wait_trigger 0000          read_cap@cap_val 0044      start_initialization 01FE  
            ?_msec_delay 0040           msec_delay@msec 0040                ___latbits 0000  
          __pcstackBANK0 0040        __size_of_read_cap 001A      __size_of_msec_delay 0013  
   __end_of_wait_trigger 0176                 _CLC1GLS0 0035                 _CLC1GLS1 0036  
               _CLC1GLS2 0037                 _CLC1GLS3 0038                 _CLC1SEL0 0032  
               _CLC1SEL1 0033             ??_msec_delay 0000            __size_of_main 005B  
               _read_cap 0189    __size_of_wait_trigger 0004       __end_of_msec_delay 0189  
           _wait_trigger 0172               _OPTION_REG 000E  
